---
# gem install cf
# cf -f login admin --password password1234!
# cf -f  create-service-auth-token  --label mysql  --provider core  --token token

name:           cloud-foundry
director_uuid:  "DO NOT CHANGE THIS STRING"

releases:
- name: appcloudng.core
  version: ###ucc_product_version###
- name: appcloudng.services
  version: ###ucc_product_version###
- name: appcloudng.services-contrib
  version: ###ucc_product_version###
- name: appcloudng.uhuru-service
  version: ###ucc_product_version###



compilation:
  workers: 1
  reuse_compilation_vms: true
  network: default
  cloud_properties:
    ram: 2048
    disk: 8096
    cpu: 4

update:
  canaries: 0
  canary_watch_time: 3000-90000
  update_watch_time: 15000-300000
  max_in_flight: 1

networks:

- name: default
  subnets:
  - reserved: []
    static: []
    range:
    gateway:
    dns: []
    cloud_properties:
      name:



resource_pools:

- name: windows
  network: default
  size: 1
  stemcell:
    name: windows
    version: 0.9.6
  cloud_properties:
    ram: 4096
    disk: 10000
    cpu: 2
  env:
    windows:
      product_key: 00000-00000-00000-00000-00000
    bosh:
      password: Change_me!

- name: tiny
  network: default
  size: 6
  stemcell:
    name: bosh-stemcell
    version: 1.5.0.pre.3
  cloud_properties:
    ram: 300
    disk: 5000
    cpu: 1
  env:
    bosh:
      password: $6$DxzA20NmmfOjOyqk$GiuzvfioqPMpzOIZxhKeuPRSEniM2PecTQLBtj1wcX8j9RncfzLWKNAfdQ/X0hJoTRmyvqNCe1N1BwQb5F3TP.

- name: small
  network: default
  size: 5
  stemcell:
    name: bosh-stemcell
    version: 1.5.0.pre.3
  cloud_properties:
    ram: 512
    disk: 5000
    cpu: 1
  env:
    bosh:
      password: $6$DxzA20NmmfOjOyqk$GiuzvfioqPMpzOIZxhKeuPRSEniM2PecTQLBtj1wcX8j9RncfzLWKNAfdQ/X0hJoTRmyvqNCe1N1BwQb5F3TP.


- name: medium
  network: default
  size: 10
  stemcell:
    name: bosh-stemcell
    version: 1.5.0.pre.3
  cloud_properties:
    ram: 2048
    disk: 5000
    cpu: 2
  env:
    bosh:
      password: $6$DxzA20NmmfOjOyqk$GiuzvfioqPMpzOIZxhKeuPRSEniM2PecTQLBtj1wcX8j9RncfzLWKNAfdQ/X0hJoTRmyvqNCe1N1BwQb5F3TP.

- name: large
  network: default
  size: 1
  stemcell:
    name: bosh-stemcell
    version: 1.5.0.pre.3
  cloud_properties:
    ram: 4096
    disk: 10000
    cpu: 2
  env:
    bosh:
      password: $6$DxzA20NmmfOjOyqk$GiuzvfioqPMpzOIZxhKeuPRSEniM2PecTQLBtj1wcX8j9RncfzLWKNAfdQ/X0hJoTRmyvqNCe1N1BwQb5F3TP.

- name: deas
  network: default
  size: 1
  stemcell:
    name: bosh-stemcell
    version: 1.5.0.pre.3
  cloud_properties:
    ram: 4096
    disk: 30000
    cpu: 2
  env:
    bosh:
      password: $6$DxzA20NmmfOjOyqk$GiuzvfioqPMpzOIZxhKeuPRSEniM2PecTQLBtj1wcX8j9RncfzLWKNAfdQ/X0hJoTRmyvqNCe1N1BwQb5F3TP.


jobs:
  - name: debian_nfs_server
    template: 
      - debian_nfs_server # stateful; static ip or domain name required for internal identification 
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: small
    persistent_disk: 100000
    networks: 
      - name: default
        static_ips:

  - name: nats
    template:
      - nats # stateless; static ip or domain name required for internal identification
    release: appcloudng.core
    instances: 1 # more instances can be running, but not useful for CF
    resource_pool: small
    networks:
      - name: default
        static_ips:

  - name: syslog_aggregator 
    template:
      - syslog_aggregator # stateful; static ip or domain name required for internal identification
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: medium
    persistent_disk: 10000
    networks:
      - name: default
        static_ips:

  - name: router
    template: 
      - gorouter # stateless, static ip or domain name required for external identification
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: medium
    networks:
      - name: default
        static_ips:

    # ccdb_ng and uaadb consolidated
  - name: vcap_postgres
    template: 
      - postgres # stateful; static ip or domain name required for internal identification
    release: appcloudng.core
    instances: 1
    resource_pool: medium
    persistent_disk: 10000 #
    networks:
      - name: default
        static_ips:
    properties:
      db: vcap_databases

  - name: uaa
    template: 
      - uaa # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # version 1.4.x can be farmed
    resource_pool: medium
    networks:
      - name: default

  - name: login
    template: 
      - login # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: small
    networks:
      - name: default
    properties: {}

  - name: cloud_controller_ng
    template: 
      - cloud_controller_ng # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: medium
    networks: 
      - name: default

  - name: api_worker
    template:
      - cloud_controller_ng # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: medium
    networks:
      - name: default
    properties:
      ccng:
        process_group: worker

  - name: dea_next
    template: 
      - dea_next # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: deas
    networks:
      - name: default
    properties:
      dea_next:
        stacks: ["lucid64"]

  - name: win_dea
    template:
      - win_dea # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # farmable
    resource_pool: windows
    networks:
      - name: default
    properties:
      win_dea:
        stacks: ["win2012"]

  - name: health_manager
    template:
      - health_manager_next # stateless, dynamically discovered
    release: appcloudng.core
    instances: 1 # cannot scale horizontally
    resource_pool: tiny
    networks:
      - name: default


  ###### Windows Nodes #####

  - name: mssql_node_free
    template: mssql_node
    release: appcloudng.uhuru-service
    instances: 0
    persistent_disk: 75000
    resource_pool: windows
    networks:
    - name: default
      static_ips:


  ###### Service Nodes ####
  - name: mysql_node_free
    template:
      - mysql_node # statefull, dynamically discovered by internal components, static IP or domain name requied for serving connections from apps
    release: appcloudng.services
    instances: 1 # farmable, NB: evacuate all services when scaling down
    resource_pool: medium
    persistent_disk: 5000
    networks:
      - name: default
        static_ips:
    properties:
      mysql_node:
        plan: "free"

  - name: mongodb_service_node_free
    release: appcloudng.services-contrib
    template: mongodb_node_ng
    instances: 0
    resource_pool: medium
    persistent_disk: 10000
    properties:
      plan: "free"
    networks:
      - name: default
        default: [dns, gateway]

  - name: memcached_service_node_free
    release: appcloudng.services-contrib
    template: memcached_node_ng
    instances: 0
    resource_pool: medium
    persistent_disk: 10000
    properties:
      plan: "free"
    networks:
      - name: default
        default: [dns, gateway]

  - name: vblob_service_node_free
    release: appcloudng.services-contrib
    template: vblob_node_ng
    instances: 0
    resource_pool: small
    persistent_disk: 10000
    properties:
      plan: "free"
    networks:
      - name: default
        default: [dns, gateway]

  - name: elasticsearch_service_node_free
    release: appcloudng.services-contrib
    template: elasticsearch_node
    instances: 0
    resource_pool: small
    persistent_disk: 10000
    properties:
      plan: "free"
    networks:
      - name: default
        default: [dns, gateway]

  - name: postgresql_service_node_free
    release: appcloudng.services-contrib
    template: postgresql_node_ng
    instances: 1
    resource_pool: medium
    persistent_disk: 10000
    properties:
      postgresql_node:
        plan: "free"
    networks:
      - name: default
        static_ips:
        default: [dns, gateway]

  - name: redis_service_node_free
    release: appcloudng.services-contrib
    template: redis_node_ng
    instances: 1
    resource_pool: small
    persistent_disk: 10000
    properties:
      plan: "free"
    networks:
      - name: default
        static_ips:
        default: [dns, gateway]

  - name: rabbit_service_node_free
    release: appcloudng.services-contrib
    template: rabbit_node_ng
    instances: 1
    resource_pool: small
    persistent_disk: 10000
    properties:
      plan: "free"
    networks:
      - name: default
        static_ips:
        default: [dns, gateway]


  #### Service Gateways ####
  - name: service_gateways
    template:
      - mysql_gateway      # stateless, dynamically discovered
    release: appcloudng.services
    instances: 1 # cannot scale horizontally
    resource_pool: tiny
    networks:
      - name: default # static ip not required
    properties: {}

  - name: gateways_contrib
    release: appcloudng.services-contrib
    template:
#    - elasticsearch_gateway
#    - mongodb_gateway
#    - memcached_gateway
#    - vblob_gateway
    - postgresql_gateway_ng
    - redis_gateway
    - rabbit_gateway

    instances: 1
    resource_pool: medium
    networks:
      - name: default
        default: [dns, gateway]
    properties: {}
      # Service credentials
      #uaa_client_id: "cf"
      #uaa_endpoint: http://uaa.mycloud.com # CHANGE
      #uaa_client_auth_credentials:
      #  username: services
      #  password: SERVICES_PASSWORD # CHANGE


  - name: mssql_gateway
    template: mssql_gateway
    release: appcloudng.uhuru-service
    instances: 0
    resource_pool: tiny
    networks:
    - name: default

  - name: uhuru_webui
    template: uhuru_webui
    release: appcloudng.core
    instances: 1
    persistent_disk: 10000
    resource_pool: medium
    networks:
    - name: default

properties:
  sysadmin_password: changeme
  domain: mydomain.net
  system_domain_organization: sys-org
  system_domain: ccng-dev.net
  app_domains:
    - 'apps.mydomain.net'

  env: {}
  support_address: "http://support.mydomain.net" # has default "http://support.cloudfoundry.com"
  description: "Uhuru AppCloud Platform as a Service"

  uhuru:
    webui:
      port: 9191
      monitoring:
        monitoring_user_password: "<%= SecureRandom.hex %>"
        email_to: "contact.uhurusoftware.com"
        components:
          dea: 0
          win_dea: 0
          mysql_node: 0
          #mongodb_node: 0
          redis_node: 0
          rabbit_node: 0
          postgresql_node: 0
#          uhuru_tunnel_node: 0
#          uhurufs_node: 0
          mssql_node: 0

  networks:
    apps: default
    management: default

  nfs_server:
    address: 10.0.7.121
    network: 10.0.0.0/16

  debian_nfs_server:
    no_root_squash: true # false by default. set to true to use in services.

  syslog_aggregator:
    address: 10.0.7.125
    port: 54321
    transport: relp

  nats: 
    user: <%= SecureRandom.hex %>
    password: <%= SecureRandom.hex %> # Security: assign a random value.
    address: 10.0.7.122
    port: 4222
    authorization_timeout: 20
    use_gnatsd: true
    machines:
      - 10.0.100.45

  <% db_name = "ccdb_ng" %>
  <% db_name_old = "ccdb" %>
  <% db_password = SecureRandom.hex%>
  # databases and roles defined to be created in the postgres job
  # This is artifically created to have only one db deployed.
  vcap_databases:
    address: 10.0.7.123
    port: 2544
    databases:
    - tag: cc
      name: <%= db_name_old %>
    - tag: cc_ng
      name: <%= db_name %>
      citext: true # not compatible with psql 9.2, use create extension instead
      #run_on_every_startup:
      #  - "CREATE EXTENSION IF NOT EXISTS citext"
    - tag: uaa
      name: uaa
    - tag: monitoring
      name: monitoring
    roles:
    - tag: admin
      name: root
      password: <%= db_password %> # Security: assign a random value.
    - tag: uaa
      name: uaa
      password: <%= db_password %> # Security: assign a random value.
    - tag: monitoring
      name: monitoring
      password: <%= db_password %>


  ccdb_ng:
    address: 10.0.7.123
    port: 2544
    databases: 
    - tag: cc
      name: <%= db_name %>
      citext: true
    roles:
    - tag: admin
      name: root
      password: <%= db_password %> # Security: assign a random value.

  uaadb:
    address: 10.0.7.123
    port: 2544
    db_scheme: postgresql
    # spring_profiles: postgresql # default is value from db_scheme
    databases:
    - tag: uaa
      name: uaa
    roles:
    - tag: admin
      name: uaa
      password: <%= db_password %> # Security: assign a random value.

  # ccdb is legacy. required for uaa batch until it is removed
  ccdb:
    address: 10.0.7.123
    port: 2544
    db_scheme: postgresql
    databases:
    - tag: cc
      name: <%= db_name_old %>
    roles:
    - tag: admin
      name: root
      password: <%= db_password %>

  cc_props: cc # used by hm
  cc: 
    srv_api_uri: http://api.mydomain.net # srv_api_uri still used or api endpoint.

  ccng:
    stacks: 
      - name: "lucid64"
        description: "Lucid 64"
      - name: "win2012"
        description: "Windows 2012"

    cc_partition: "default" # has default "ng"

    bulk_api_user: bulk_api # has default "bulk_api"
    bulk_api_password: <%= SecureRandom.hex %> # Security: assign a random value.
    uaa_resource_id: cloud_controller # mirror to cc.uaa.resource_id
    external_host: api  # has default 'api2'
    max_staging_runtime: 300 # has default 300
    staging_upload_user: <%= SecureRandom.hex %>
    staging_upload_password: <%= SecureRandom.hex %>
    db_encryption_key: <%= SecureRandom.hex %>

    default_account_capacity:
      memory: 512
      app_uris: 8
      services: 4
      apps: 4
    admin_account_capacity:
      memory: 2048
      app_uris: 24
      services: 16
      apps: 16

    # logging_level: debug # has default "info"
    # db_logging_level: debug2 # has default "debug2"
    # use_nginx: true # has default true

    default_quota_definition: "free" # no default

    quota_definitions:
      free:
        non_basic_services_allowed: false
        total_services: 2
        total_routes: 1000
        memory_limit: 1024   # units in MB
      paid:
        non_basic_services_allowed: true
        total_services: 33
        total_routes: 1000
        memory_limit: 204800 # 200 GB # units in MB
      runaway:
        non_basic_services_allowed: true
        memory_limit: 102400
        total_routes: 1000
        total_services: -1

    resource_pool:
      minimum_size: 0 # ccng default of 0 # units in MB
      maximum_size: 512  # ccng default of 512 # units in MB
      resource_directory_key: "cc-resources" # ccng default "cc-resources"

  router:
    #offset: 0 # not requried; used to offset index
    #trace_key: 22 
    status:
      port: 8080
      user: <%= SecureRandom.hex %>
      password: <%= SecureRandom.hex %> # Security: assign a random value.

  health_manager:
    cc_partition: "default" # has default "default"

  dea_next:
    # streaming_timeout: 60 # has default
    memory_mb: 8000 # has default '8000'
    memory_overcommit_factor: 1 # has default 1
    disk_mb: 32000 # has default '32000'
    disk_overcommit_factor: 1 # has default 1
    num_instances: 30 # has default '30'
    directory_server_protocol: "http" # has default 'https'

  win_dea:
    max_memory: 8000
    filerport: 12346
    statusport: 12345
    v2fileport: 34567

  uaa:
    require_https: false
    no_ssl: true

    cc:
      client_secret: <%= SecureRandom.hex %> # Security: assign a random value.
      token_secret: <%= SecureRandom.hex %> # symetric secret with uaa. will mirror jwt.signing_key # Security: assign a random value.
    admin:
      client_secret:  <%= SecureRandom.hex %> # Security: assign a random value.
    batch:
      username: batch
      password: <%= SecureRandom.hex %> # Security: assign a random value.

    #client:
    #  autoapprove:
    #    - vmc
    login:
      addnew: false
      
    clients:
      webui:
        override: true
        secret: <%= SecureRandom.hex %>
        authorized-grant-types: client_credentials,password,authorization_code
        scope: cloud_controller.read,cloud_controller.write,cloud_controller.admin,openid,password.write,scim.read,scim.write # scopes that can be requested to impersonate a user
        authorities: uaa.admin,uaa.resource,tokens.read,scim.read,scim.write,password.write,cloud_controller.read,cloud_controller.write,cloud_controller.admin # scopes granted to the client
        autoapprove: true

      login:
        secret: <%= SecureRandom.hex %>
      vmc:
        override: true
        authorized-grant-types: implicit,password
        authorities: uaa.none
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write
        autoapprove: true
      cf:
        override: true
        authorized-grant-types: implicit,password,authorization_code,refresh_token
        authorities: uaa.none
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write
        autoapprove: true

<% services_password = SecureRandom.hex %>
    scim:
      # userids_enabled: true # has default false
      user:
        override: true #true # has default true
      users:
      - admin|password1234!|scim.write,scim.read,openid,cloud_controller.admin
      - services|<%= services_password %>|scim.write,scim.read,openid,cloud_controller.admin

  login:
    protocol: http # has default "http"
    # uaa_base: http://uaa.test.com # auto-generated

############## Services ##############

  # uaa_ is used by the service gateways to authenticate to cc_api_version v2
  uaa_endpoint:  "http://uaa.ccng-dev.net"
  uaa_client_id: "cf"  # has default 'vmc'
  uaa_client_auth_credentials:
    username: "services"
    password: <%= services_password %>

  mysql_gateway:
    supported_versions: ["5.5"]
    version_aliases:
      current: "5.5"
    token: <%= SecureRandom.hex %> # Security: assign a random value.
    cc_api_version: v2
    check_orphan_interval: 7200 # has default '-1'
    service_timeout: 70 # has default 10
    node_timeout: 60 # has default 8
    default_plan: "free" # has default 'free'
  mysql_node:
    supported_versions: ["5.5"]
    default_version: "5.5"
    z_interval: 30 # has default 30
    service_start_timeout: 30 # has default 3
    op_time_limit: 50 # has default 6
    m_interval: 10 # has default 10
    password: <%= SecureRandom.hex %> # Security: assign a random value.
    max_tmp: 1024 # has default 2048 # units in MB
    production: false

  mongodb_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["2.2"]
    version_aliases:
      current: "2.2"
    cc_api_version: v2
  mongodb_node:
    supported_versions: ["2.2"]
    default_version: "2.2"
    max_tmp: 900

  memcached_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["1.4"]
    version_aliases:
      current: "1.4"
    cc_api_version: v2
  memcached_node:
    supported_versions: ["1.4"]
    default_version: "1.4"

  vblob_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["0.51"]
    version_aliases:
      current: "0.51"
    cc_api_version: v2
  vblob_node:
    supported_versions: ["0.51"]
    default_version: "0.51"

  elasticsearch_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["0.20"]
    version_aliases:
      current: "0.20"
    cc_api_version: v2
  elasticsearch_node:
    supported_versions: ["0.20"]
    default_version: "0.20"

  postgresql_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["9.2"]
    version_aliases:
      current: "9.2"
    cc_api_version: v2
  postgresql_node:
    supported_versions: ["9.2"]
    default_version: "9.2"
    max_tmp: 900
    password: <%= SecureRandom.hex %> # CHANGE

  redis_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["2.6"]
    version_aliases:
      current: "2.6"
    cc_api_version: v2
  redis_node:
    supported_versions: ["2.6"]
    default_version: "2.6"
    max_tmp: 900

  rabbit_gateway:
    token: <%= SecureRandom.hex %> # CHANGE - the token you use later with `cf create-service-auth-token`
    default_plan: "free"
    supported_versions: ["3.0"]
    version_aliases:
      current: "3.0"
    cc_api_version: v2
  rabbit_node:
    supported_versions: ["3.0"]
    default_version: "3.0"
    max_tmp: 900


  mssql_gateway:
    check_orphan_interval: 7200
    token: "<%= SecureRandom.hex %>"
    service_timeout: 60
    node_timeout: 30
    supported_versions:
    - "2008"
    version_aliases:
      current: "2008"
    cc_api_version: v2

  mssql_node:
    capacity: 200
    admin_user: sa
    admin_password: changem3!
    port: 1433
    max_db_size: 20
    max_long_query: 3
    max_long_tx: 30
    max_user_conns: 20
    default_version: 2008
    statusport: 12345
    product_key: 00000-00000-00000-00000-00000


  service_plans:
    mysql:
      "free":
        unique_id: "748bfee4-af46-42a7-84e6-a157cf0d43a6"
        description: "Shared server, shared VM, 1MB memory, 10MB storage, 10 connections"
        free: true
        # extra: '{"cost":5.0,"bullets":[{"content":"10 MB storage"},{"content":"3 concurrent connections"},{"content":"Shared server"}]}'
        job_management:
          high_water: 450
          low_water: 50
        configuration:
          allow_over_provisioning: false
          capacity: 500
          max_db_size: 500
          key_buffer: 512
          innodb_buffer_pool_size: 512
          max_allowed_packet: 32
          thread_cache_size: 256
          query_cache_size: 256
          max_long_query: 10
          max_long_tx: 120
          max_clients: 10
          max_connections: 1000
          table_open_cache: 2000
          innodb_tables_per_database: 100
          connection_pool_size:
            min: 5
            max: 10
          backup:
            enable: true # has default false
            interval: "0 3 * * *" # has default "0 3 * * *"
            node_interval: 5 # had default 5
            first_node_only: false # has default false
            timeout: 600 # has default 600
          #lifecycle:
          #  enable: false # has default false
          #  serialization: enable # has default "disable"
          #  snapshot:
          #    quota: 1 # has default 0
          #  worker_count: 5 # has default 1
          warden:
            enable: false # has default false

#    mongodb:
#      "free":
#        description: "Developer, shared VM, 250MB storage, 10 connections"
#        free: true
#        job_management:
#          high_water: 230
#          low_water: 20
#        configuration:
#          capacity: 125
#          max_clients: 10
#          quota_files: 4
#          quota_data_size: 240
#          enable_journaling: true
#          backup:
#            enable: true
#          lifecycle:
#            enable: true
#            serialization: enable
#            snapshot:
#              quota: 1
#
#    memcached:
#      "free":
#        description: "Developer"
#        free: true
#        job_management:
#          high_water: 230
#          low_water: 20
#        configuration:
#          capacity: 125
#
#    vblob:
#      "free":
#        description: "Developer"
#        free: true
#        job_management:
#          high_water: 230
#          low_water: 20
#        configuration:
#          capacity: 125
#
#    elasticsearch:
#      "free":
#        description: "Developer"
#        free: true
#        job_management:
#          high_water: 230
#          low_water: 20
#        configuration:
#          capacity: 125

    postgresql:
      "free":
        description: "Developer, 250MB storage, 10 connections"
        free: true
        job_management:
          high_water: 230
          low_water: 20
        configuration:
          capacity: 125
          max_clients: 10
          quota_files: 4
          quota_data_size: 240
          enable_journaling: true
          backup:
            enable: false
          lifecycle:
            enable: false
            serialization: enable
            snapshot:
              quota: 1

    redis:
      "free":
        description: "Developer, 250MB storage, 10 connections"
        free: true
        job_management:
          high_water: 230
          low_water: 20
        configuration:
          capacity: 125
          max_clients: 10
          quota_files: 4
          quota_data_size: 240
          enable_journaling: true
          backup:
            enable: false
          lifecycle:
            enable: false
            serialization: enable
            snapshot:
              quota: 1


    rabbit:
      "free":
        description: "Developer, 250MB storage, 10 connections"
        free: true
        job_management:
          high_water: 230
          low_water: 20
        configuration:
          capacity: 125
          max_clients: 10
          quota_files: 4
          quota_data_size: 240
          enable_journaling: true
          backup:
            enable: false
          lifecycle:
            enable: false
            serialization: enable
            snapshot:
              quota: 1

    mssql:
      free:
        unique_id: 2292b94f-2507-466e-aeb6-5e50f0fa3714
        description: "Microsoft Sql Server Database with 128 MB storage"
        free: true
        job_management:
          high_water: 1400
          low_water: 100
        configuration:
          allow_over_provisioning: false
          capacity: 100
          max_db_size: 128
          max_long_query: 3
          max_long_tx: 0
          max_clients: 20
          lifecycle:
            enable: true
            worker_count: 1
            snapshot:
              quota: 10

